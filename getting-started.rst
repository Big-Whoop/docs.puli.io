.. index::
    single: Getting Started
    single: Installation

.. |trade| unicode:: U+2122

Getting Started
===============

This section explains how to get started with Puli_. If you don't know what Puli
is or why you should use it, read :doc:`at-a-glance` first.

Requirements
------------

Puli requires PHP 5.3.9 or higher.

Stability
---------

Puli is not yet available in a stable version. The following table lists the
current version of Puli's core components as well as their expected stable
release dates:

=================  =====================================  ============= ===================
Component          Description                            Version       Stable Release
=================  =====================================  ============= ===================
Repository_        The PHP resource repository API        1.0.0-beta    April 2015
Discovery_         The PHP resource discovery API         1.0.0-beta    April 2015
Factory_           The factory API for Puli's services    1.0.0-beta    April 2015
CLI_               The Command-Line Interface             1.0.0-beta    April 2015
=================  =====================================  ============= ===================

Installation
------------

To install Puli, add the Puli components to your composer.json file. The
specific requirements depend on where you install Puli:

* An application that is *not* depended on by other Composer packages:

  .. code-block:: json

      {
          "require": {
              "puli/cli": "~1.0"
          },
          "minimum-stability": "beta"
      }

* A reusable Composer package:

  .. code-block:: json

      {
          "require": {
              "puli/repository": "~1.0",
              "puli/discovery": "~1.0"
          },
          "require-dev": {
              "puli/cli": "~1.0"
          },
          "minimum-stability": "beta"
      }

Run ``composer update`` to install the package. Type ``vendor/bin/puli`` to
check whether the CLI was installed successfully:

.. code-block:: text

    $ vendor/bin/puli

.. caution::

    The leading ``$`` in the code examples is a convention that tells you that
    the example contains shell code. Type the command that follows the dollar
    sign in your terminal, but don't type the ``$`` itself.

.. note::

    If "vendor-dir" or "bin-dir" is set in composer.json, the path to the
    ``puli`` command will be different.

Recommended: Add Shortcut to Puli
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To save you from typing ``vendor/bin/puli`` all the time, add the ``vendor/bin``
directory to your path:

* On Unix-based systems, add the following line to ``~/.bashrc``:

    .. code-block:: bash

        export PATH="$PATH:vendor/bin"

  Apply the changes with the ``source`` command:

    .. code-block:: text

        $ source ~/.bashrc

* On Windows, append ``;vendor/bin`` to the environment variable "Path". In
  Windows 7, you can find the environment variables in the Control Panel
  under "System" → "Advanced system settings" → "Advanced" →
  "Environment Variables".

.. caution::

    If "vendor-dir" or "bin-dir" is set in composer.json, adapt the content
    of the path accordingly.

Now you should be able to run ``puli`` without the ``vendor/bin/`` prefix.

Recommended: Disable Glob Expansion (Unix only)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

By default, Unix shells like Bash expand glob arguments before passing them to
the called command. Look at this short example for a demonstration:

.. code-block:: text

    # What you type
    $ command *.js

    # What the command receives by the shell
    $ command script1.js script2.js ...

If you use Puli on a Unix system, you should disable glob expansion for the
``puli`` command. If you use Bash, add the following lines to ``~/.bashrc``:

.. code-block:: bash

    # Disable glob expansion for Puli
    alias puli='set -f;puli';puli(){ command puli "$@";set +f;}

Apply the changes with the ``source`` command:

.. code-block:: text

    $ source ~/.bashrc

If you use a different shell than Bash, see `this answer on StackOverflow`_ for
instructions.

Loading the Puli Services
-------------------------

When working with Puli, you mainly need three services:

* The :class:`Puli\\Factory\\PuliFactory` for creating Puli's services;
* The :class:`Puli\\Repository\\Api\\ResourceRepository` for accessing Puli
  resources;
* The :class:`Puli\\Discovery\\Api\\ResourceDiscovery` for finding Puli
  resources by their functionality.

In simple applications, you can create a ``bootstrap.php`` file that stores
these services in global variables:

.. code-block:: php

    $factoryClass = PULI_FACTORY_CLASS;

    $factory = new $factoryClass();
    $repo = $factory->createRepository();
    $discovery = $factory->createDiscovery($repo);

The PULI_FACTORY_CLASS holds the name of the factory class generated by the Puli
CLI.

For performance reasons, the Puli services should be created only once per
application. Instead of storing them in global variables, it is usually nicer
to use a Dependency Injection Container for creating the services on demand.
A simple Dependency Injection Container for small projects is Pimple_.

.. note::

    If you are developing a reusable Composer package, do not create the Puli
    services yourself. Instead, let the application create them and pass them to
    the classes of your package.

My First Puli Resource
----------------------

Now that Puli is set up, let's add our first resource to the Puli repository.
We will create a directory ``res`` that holds the resources of our application:

.. code-block:: text

    $ mkdir res

Next we will map the Puli path ``/app`` to that directory:

.. code-block:: text

    $ puli path map /app res

All resources stored in the ``res`` directory can now be accessed using the Puli
path ``/app``. As example, we will add a ``config.yml`` file:

.. code-block:: text

    $ mkdir res/config
    $ echo "# Success!" > res/config/config.yml

Let's use the Puli repository to access the file:

.. code-block:: php

    // # Success!
    echo $repo->get('/app/config/config.yml')->getBody();

The Puli repository can be used to access all files in all Composer packages
that are mapped with the ``puli path map`` command.

Enabling Support for Web Assets
-------------------------------

Most web applications need to place their public files, such as CSS, Javascript
or image files, in a public directory that can be accessed by web browsers.
This functionality is covered by Puli's `Asset Plugin`_. The plugin can be
installed with Composer:

.. code-block:: text

    $ composer require puli/asset-plugin:~1.0

.. note::

    Make sure that the "minimum-stability" setting is set to "dev" in
    composer.json, otherwise the installation will fail:

    .. code-block:: json

        {
            ...,
            "minimum-stability": "dev"
        }

Before the plugin can be used, it needs to be enabled with the Puli CLI:

.. code-block:: text

    $ puli plugin install Puli\\AssetPlugin\\Api\\AssetPlugin

My First Web Asset
------------------

Now that the Asset Plugin is installed, we will add a file ``style.css`` to our
Puli repository that we want to access in the browser:

.. code-block:: text

    $ mkdir res/public
    $ mkdir res/public/css
    $ echo "/* style.css */" > res/public/css/style.css

To publish the file, we first need to tell Puli where the document root of our
server is located. Puli calls that an *install target*.

Let's add a new install target with the name "local" that points to the
``public_html`` directory in our project:

.. code-block:: text

    $ puli target add local public_html

Now we can map the ``/app/public`` directory to the root of that install target:

.. code-block:: text

    $ puli asset map /app/public /

The command ``puli asset install`` will install all assets under the
``/app/public`` directory in ``public_html``:

.. code-block:: text

    $ puli asset install
    Installing /app/public into public_html via symlink...

The file ``http://localhost/css/style.css`` can now be accessed in the browser,
as long as ``localhost`` points to our ``public_html`` directory.

Read :doc:`web-assets` to learn more about web asset management.

Directory Layout Recommendation
-------------------------------

We recommend to follow a certain directory layout in your project. This is by
no means mandatory, but it will improve your experience when working with Puli.

Most importantly, we recommend to separate PHP code and non-PHP resources into
two separate top-level directories:

.. code-block:: text

    src/
        MyService.php
        ...
    res/
        config/
            config.yml
        ...

The names of these directories don't matter -- you can name them ``source``,
``resources`` or whatever else you prefer. The important point is that the two
directories do not overlap. If the directories overlap, both the class
autoloader and the resource repository need to process unnecessary files.

Second, we recommend to use the following names for the sub-directories of the
resource directory:

.. code-block:: text

    config/
        ... configuration files ...
    public/
        css/
            ... CSS files ...
        js/
            ... Javascript files ...
        images/
            ... images ...
    trans/
        ... translation files ...
    views/
        ... templates ...

Using common names ensures a consistent user experience when referencing
resources in your project and any other Puli-enabled package:

.. code-block:: php

    // Rendering an application template with Twig
    $twig->render('/app/views/index.html');

    // Rendering a package template with Twig
    $twig->render('/acme/blog/views/post/show.html.twig');

The public resources are bundled in a directory ``public`` because this way
these resources can be easily copied to sub-directories of your public
directory:

.. code-block:: text

    /app/public/* -> /public_html/
    /acme/blog/public/* -> /public_html/blog/
    ...

Further Reading
---------------

* Read :doc:`mapping-resources` to learn how to map Puli paths to files and
  directories.
* Read :doc:`working-with-resources` to learn how to use the resources returned
  by the generated repository.

.. _Puli: https://github.com/puli/puli
.. _Puli CLI: https://github.com/puli/cli
.. _Composer Plugin: https://github.com/puli/composer-plugin
.. _Composer: https://getcomposer.org
.. _Repository: https://github.com/puli/repository
.. _Discovery: https://github.com/puli/discovery
.. _Factory: https://github.com/puli/factory
.. _CLI: https://github.com/puli/cli
.. _this answer on StackOverflow: http://stackoverflow.com/questions/11456403/stop-shell-wildcard-character-expansion/22945024#22945024
.. _Pimple: http://pimple.sensiolabs.org
.. _Asset Plugin: https://github.com/puli/web-resource-plugin
